C51 COMPILER V9.60.0.0   CLOCK_DS1302                                                      04/13/2022 21:07:12 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE CLOCK_DS1302
OBJECT MODULE PLACED IN .\Objects\clock_DS1302.obj
COMPILER INVOKED BY: D:\software\Keil_V5\C51\BIN\C51.EXE clock_DS1302.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRIN
                    -T(.\Listings\clock_DS1302.lst) OBJECT(.\Objects\clock_DS1302.obj)

line level    source

   1          #include <REGX52.H>
   2          #include "type_def.h"
   3          #include "clock_DS1302.h"
   4          
   5          sbit DS1302_CLK = P3^6;
   6          sbit DS1302_IO = P3^4;
   7          sbit DS1302_CE = P3^5;
   8          
   9          U8 gCLK_BYTE_SIZE = CLK_BYTE_SIZE;
  10          
  11          //---DS1302 写入和读取时分秒的地址命令---//
  12          U8 gWRITE_SAFE_ADDR = 0x8E;
  13          U8 gWRITE_SAFE_SWITCH[2] = {0x80, 0x00}; // 0x00 open write, 0x80 close write
  14          //---秒分时日月周年 最低位读写位;-------//
  15          U8 gREAD_RTC_ADDR[CLK_BYTE_SIZE] = {0x81, 0x83, 0x85, 0x87, 0x89, 0x8b, 0x8d};
  16          U8 gWRITE_RTC_ADDR[CLK_BYTE_SIZE] = {0x80, 0x82, 0x84, 0x86, 0x88, 0x8a, 0x8c};
  17          //---DS1302 时钟初始化 2022 年 4 月 11 日星期一 00 点 59 分 47 秒。---//
  18          //---存储顺序是秒分时日月周年,存储格式是用 BCD 码---//
  19          U8 gDS1302_TIME[CLK_BYTE_SIZE] = {0x55, 0x59, 0x00, 0x11, 0x04, 0x01, 0x22};
  20          
  21          void noop(void) {
  22   1      //    U8 i = 0;
  23   1      //    while(++i < 10);
  24   1      }
  25          
  26          void initClockDS1302(void) {
  27   1          U8 i = 0;
  28   1          writeTimeClockDS1302(gDS1302_TIME);
  29   1      }
  30          
  31          PU8 readTimeClockDS1302(void) {
  32   1          U8 i = 0;
  33   1          U8 time[CLK_BYTE_SIZE] = {0};
  34   1          for (i = 0; i < gCLK_BYTE_SIZE; ++i) {
  35   2              time[i] = readByteClockDS1302(gREAD_RTC_ADDR[i]);
  36   2          }
  37   1          return time;
  38   1      }
  39          
  40          void writeTimeClockDS1302(U8 time[CLK_BYTE_SIZE]) {
  41   1          U8 i = 0;
  42   1          writeByteClockDS1302(gWRITE_SAFE_ADDR, gWRITE_SAFE_SWITCH[1]);
  43   1          for (i = 0; i < gCLK_BYTE_SIZE; ++i) {
  44   2              writeByteClockDS1302(gWRITE_RTC_ADDR[i], time[i]);
  45   2          }
  46   1          writeByteClockDS1302(gWRITE_SAFE_ADDR, gWRITE_SAFE_SWITCH[0]);
  47   1      }
  48          
  49          U8 readByteClockDS1302(U8 clockAddr) {
  50   1          U8 i = 0, v = 0x00;
  51   1          DS1302_CE = 0;
  52   1          // noop();
  53   1          DS1302_CLK = 0;
  54   1          // noop();
C51 COMPILER V9.60.0.0   CLOCK_DS1302                                                      04/13/2022 21:07:12 PAGE 2   

  55   1          DS1302_CE = 1;
  56   1          // noop();
  57   1          
  58   1          for(i = 0; i < BYTE_SIZE; ++i) {
  59   2              DS1302_IO = clockAddr & (0x01 << i);
  60   2              
  61   2              DS1302_CLK = 1;
  62   2              // noop();
  63   2              DS1302_CLK = 0;
  64   2              // noop();
  65   2          }
  66   1          for(i = 0; i < BYTE_SIZE; ++i) {
  67   2              if (DS1302_IO) {
  68   3                  v |= 0x01 << i;
  69   3              }
  70   2      
  71   2              DS1302_CLK = 1;
  72   2              // noop();
  73   2              DS1302_CLK = 0;
  74   2              // noop();
  75   2          }
  76   1          
  77   1          DS1302_CE = 0;
  78   1          // noop();
  79   1          DS1302_IO = 0;
  80   1          // noop();
  81   1          return v;
  82   1      }
  83          
  84          void writeByteClockDS1302(U8 clockAddr, U8 clockData) {
  85   1          U8 i = 0;
  86   1          DS1302_CE = 0;
  87   1          // noop();
  88   1          DS1302_CLK = 0;
  89   1          // noop();
  90   1          DS1302_CE = 1;
  91   1          // noop();
  92   1          
  93   1          for(i = 0; i < BYTE_SIZE; ++i) {
  94   2              DS1302_IO = clockAddr & (0x01 << i);
  95   2              
  96   2              DS1302_CLK = 1;
  97   2              // noop();
  98   2              DS1302_CLK = 0;
  99   2              // noop();
 100   2          }
 101   1          for(i = 0; i < BYTE_SIZE; ++i) {
 102   2              DS1302_IO = clockData & (0x01 << i);
 103   2      
 104   2              DS1302_CLK = 1;
 105   2              // noop();
 106   2              DS1302_CLK = 0;
 107   2              // noop();
 108   2          }
 109   1          
 110   1          DS1302_CE = 0;
 111   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    333    ----
   CONSTANT SIZE    =      7    ----
C51 COMPILER V9.60.0.0   CLOCK_DS1302                                                      04/13/2022 21:07:12 PAGE 3   

   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     25      13
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
